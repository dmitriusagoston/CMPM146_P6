from models.model import Model
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam
from keras import backend as K
import random as r
import numpy as np

class RandomModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # very similar to transfered_model.py, the only difference is that you should randomize the weights
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # randomize the weights of the loaded model, possibly by using _randomize_layers
        # use this model by removing the last layer, adding dense layers and an output layer
        model = models.load_model('results/initial_model_15.keras')
        for layer in model.layers:
            layer.trainable = False
        model = self._randomize_layers(model)
        model.pop()
        model.add(layers.Dense(32, activation='relu', name='dense_0'))
        model.add(layers.Dense(2, activation='softmax', name='output_layer'))
        self.model = model
    
    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup
        self.model.compile(
            optimizer=Adam(learning_rate=0.001),
            loss='binary_crossentropy',
            metrics=['accuracy'],
        )

    @staticmethod
    def _randomize_layers(model):
        # Your code goes here

        for layer in model.layers:
            if len(layer.get_weights()) > 0:
                # set the weights to a random value between min and max of current weights
                weights = layer.get_weights()
                for i in range(len(weights)):
                    # choose random values between min and max of the current weights
                    min = np.min(weights[i])
                    max = np.max(weights[i])
                    weights[i] = np.random.uniform(min, max, weights[i].shape)
                    layer.set_weights(weights)


                # weight_shape = layer.get_weights()[0].shape
                # bias_shape = layer.get_weights()[1].shape
                # layer.set_weights([np.random.rand(*weight_shape), np.random.rand(*bias_shape)])

        # you can write a function here to set the weights to a random value
        # use this function in _define_model to randomize the weights of your loaded model
        return model
